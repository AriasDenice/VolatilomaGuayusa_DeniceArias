# Notame package installation
#if (!requireNamespace("devtools", quietly = TRUE)) {
#  install.packages("devtools")
#}
#devtools::install_github("antonvsdata/notame")

# Notame library call
library(notame)

# Dependency packages installation
install_dependencies


ppath <- "~/MSDIALGUAYUSAPRUEBB/"
init_log(log_file = paste0(ppath, "Deni_pruebb/Resultados/log.txt"))
#> Logging started: ~/test_project/log.txt.
# Check logging state

data <- read_from_excel(file = "Datos/Guayusa_H2O_GCMS_RB.xlsx", sheet = 1, 
                        corner_row = 5, corner_column = "F", 
                        split_by = c("Column", "Ion Mode"))

modes <- construct_metabosets(exprs = data$exprs, 
                              pheno_data = data$pheno_data, 
                              feature_data = data$feature_data,
                              group_col = "Group")

if (!requireNamespace("BiocManager", quietly=TRUE))
  install.packages("BiocManager")
BiocManager::install("pcaMethods")
library(pcaMethods)


# Data extraction
mode_test <- modes$Rxt5_EI
Prueba_mode <- modes$Rxt5_EI
POS_raw_sambx <- plot_sample_boxplots(Prueba_mode, order_by = "Group")
# Boxplot of raw data
raw_bp <- plot_sample_boxplots(mode_test,
                               order_by = "Group",
                               fill_by = "Group")
# PCA of raw data
raw_pca <- plot_pca(mode_test,
                    center = TRUE,
                    shape = "Group",
                    color = "Group")
# Package to plots visualization in same windows
#if (!requireNamespace("devtools", quietly = TRUE)) {
#  install.packages("devtools")
#}
#devtools::install_github("thomasp85/patchwork")
library(patchwork)
# Plot
raw_pca + raw_bp

#Preprocesamiento
# Data extraction
mode <- modes$Rxt5_EI
# Change 0 value to NA
mode <- mark_nas(mode, value = 0)

# Low detection rate
mode <- flag_detection(mode, qc_limit = 0.70, group_limit = 0.80)

# Some statistics after low detection algorithm
visualizations(mode, prefix = paste0(ppath, "Figure", "Low_Detection"))

# Drift correction
corrected <- correct_drift(mode)


corrected <- flag_quality(corrected, condition = "RSD_r < 0.3 & D_ratio_r < 0.6")

#PARA VISUALIZAR EN EL PCA
# Boxplot
corr_bp <- plot_sample_boxplots(corrected,
                                order_by = "Group",
                                fill_by = "Group")
# PCA
corr_pca <- plot_pca(corrected,
                     center = TRUE,
                     shape = "Group",
                     color = "Group") 
# Plot
corr_pca + corr_bp

# Removal of contaminants
corrected_no_blank <- flag_contaminants(corrected,
                                        blank_col = "Group",
                                        blank_label = "Blank",
                                        flag_thresh = 0.30,
                                        flag_label = "Contaminant")

# Removal blank group from dataset
corrected_no_blank <- corrected[, corrected$Group != "Blank"]

# Some statistics after low detection algorithm
visualizations(corrected_no_blank, prefix = paste0(ppath, "Figure/GCMS/", "No_Blank"))

corrected_no_qc <- drop_qcs(corrected_no_blank)

# Boxplot
no_qc_bp <- plot_sample_boxplots(corrected_no_qc,
                                 order_by = "Group",
                                 fill_by = "Group")
# PCA
no_qc_pca <- plot_pca(corrected_no_qc,
                      center = TRUE,
                      shape = "Group",
                      color = "Group")
# Plot
no_qc_pca + no_qc_bp

clustered <- cluster_features(corrected_no_qc,
                              rt_window = 1/360,
                              all_features = TRUE,
                              corr_thresh = 0.95,
                              d_thresh = 0.8,
                              #plotting = TRUE,
                              #prefix = paste0(ppath, "Cluster/GCMS/GCMS_Cluster")
)
compressed <- compress_clusters(clustered)

# Boxplot
compr_bp <- plot_sample_boxplots(compressed,
                                 order_by = "Group",
                                 fill_by = "Group")
# PCA
compr_pca <- plot_pca(compressed,
                      center = TRUE,
                      shape = "Group",
                      color = "Group")
# Plot
compr_pca + compr_bp

# To clean data
set.seed(21)
imputed <- impute_rf(compressed)


# Boxplot
imp_bp <- plot_sample_boxplots(imputed,
                               order_by = "Group",
                               fill_by = "Group")
# PCA
imp_pca <- plot_pca(imputed,
                    center = TRUE,
                    shape = "Group",
                    color = "Group")
# Plot
imp_pca + imp_bp

save(imputed, file = paste0(ppath, "Deni_pruebb/Resultados/Notame_GCMS_output.RData"))

#ANALISIS DE COMPONENTES PRINCIPALES

# Extract clean data
no_flag <- drop_flagged(imputed)
# Extracting feature height table
peak_height <- exprs(no_flag)
# Extracting Phenotipic data
pheno_data <- no_flag@phenoData@data

#PREPARACION DE DATOS

# Transposing feature height table
transp_table  <- t(peak_height)
# Changing NA to 0 
transp_table[is.na(transp_table)]=0
# Centering and Scaling features
ei_pca <- prcomp(transp_table, center = TRUE, scale. = TRUE)

#GRAFICO DEL PLANO PRINCIPAL DEL PCA

# Library to left_join use
library(dplyr)
# PCA scores
scores <- ei_pca$x %>%                   # Get PC coordinates
  data.frame %>%                         # Convert to data frames
  mutate(Sample_ID = rownames(.)) %>%    # Create a new column with the sample names
  left_join(pheno_data )                 # Adding metadata

#PARA VER LOS PORCENTAJES DE PC1 Y PC2 
summary(ei_pca)

# PCA plot
ggplot(scores, aes(PC1, PC2, shape = Group, color = Group)) +
  geom_point(size = 3) +
  guides(x=guide_axis(title = "PC1 (50.88 %)"),
         y=guide_axis(title = "PC2 (09.19 %)")) +
  #geom_text(label=pheno_data$Group, nudge_x = 1, nudge_y = 1, show.legend = FALSE)+http://127.0.0.1:35757/graphics/a63d227e-b8cc-4d6d-85f6-9b8b7ba0d22e.png
  theme_classic()

# Save plot
ggsave('Resultados/GCMS_PCA_CHAKRAB.png', width = 5, height = 4, device='png', dpi="print")

View(no_flag@featureData@data)

#GRAFICO DEL CIRCULO DE CORRELACIONES DEL PCA

loadings <- ei_pca$rotation %>%           # Extract loadings
  data.frame(Feature_ID = rownames(.))  # New column with feat name

#AÑADIMOS LOS METABOLITOS SELECCIONADOS EN EL CIRCULO DE CORRELACIONES DEL PCA 

# Load a metabolite name table
metab_name <- readxl::read_excel("Datos/GCMS_MetabolitosPrueba.xlsx", 1)
# Creating a new small table of the annotated compounds
ei_compouds <- left_join(metab_name, loadings)
# Plotting results
ggplot(loadings, aes(PC1, PC2)) + 
  geom_point(alpha = 0.2) +
  theme_classic() + 
  geom_point(data = ei_compouds, size = 1) +
  ggrepel::geom_label_repel(data = ei_compouds,
                            aes(label = Metabolite_Code),
                            box.padding = 0.5,
                            label.padding = 0.25,
                            label.r = 0.5,
                            cex = 3.5) +
  geom_point(data = ei_compouds,
             aes(shape = Nivel, color = Nivel),
             size = 3) +
  guides(x=guide_axis(title = "PC1 (50.88 %)"),
         y=guide_axis(title = "PC2 (09.19 %)")) +
  ggsci::scale_color_aaas()

#SAVEPLOT
ggsave('Resultados/GCMS_Loadings.png', width = 11, height = 9, device='png', dpi= 300)

#MAPA DE CALOR
#Instalación del paquete ComplexHeatmap y otros paquetes dependentes.

# ComplexHeatmap package installation
if (!requireNamespace("BiocManager", quietly=TRUE))
  install.packages("BiocManager")

# ColorRamp2 package installation
#if (!requireNamespace("devtools", quietly = TRUE)) {
#  install.packages("devtools")
#}
#devtools::install_github("jokergoo/colorRamp2")
library("colorRamp2")

# Cowplot package installation
#install.packages("cowplot")
library(cowplot)

# Metabolite name table
metab_name_hm <- readxl::read_excel("Datos/GCMS_MetabolitosPrueba.xlsx", 1)
# Add identified metabolite to "notame" output
add_met <- join_fData(no_flag, metab_name_hm)
# Extracting identified metabolite data
raw_hm <- add_met[!is.na(add_met@featureData@data$Metabolite_name),]
# Extracting feature height table
hm_height <- exprs(raw_hm)
# Extracting sample information
hm_pdata <- raw_hm@phenoData@data
# Extracting feature information
hm_fdata <- raw_hm@featureData@data

#Escalado de datos y anotaciones (superior y laterales) para el gráfico del mapa de calor.

set.seed(810)
# Logarithmic scale
hm_scl <- log10(hm_height)
rownames(hm_scl) <- hm_fdata$Metabolite_name
colnames(hm_scl) <- hm_pdata$Grupo
# Metabolite class color
cols_metclass <- c("None" = "#767676FF",
                   "Fenol" = "#800000FF",
                   "Ácido carboxílico" = "#8A9045FF",
                   "Flavonoide" = "#FFA319FF",
                   "Glucósido" = "#C16622FF",
                   "Tocoferol" = "#A16621FF",
                   "Siloxano" = "#F16621FF",
                   "Alcaloide" = "#116621FF")
# Add row anotation to HeatMap
hm_row_ann <- rowAnnotation(`Superclass` = hm_fdata$Superclass,
                            col = list(`Superclass` = cols_metclass),
                            show_annotation_name = T,
                            show_legend=F)
# Species color
cols_species <- c("4-6 años sombra Alto Pano" = "#e6550d",
                  "4-6 años luz Alto Pano" = "#91cf60",
                  "6-8 años sombra Alto Pano" = "#31cf60",
                  "6-8 años luz Alto Pano" = "#33d2ff",
                  "8-10 años sombra Alto Pano" = "#93d2ff",
                  "8-10 años luz Alto Pano" = "#d957f8")
# Add top anotation to HeatMap
top_info_ann <- HeatmapAnnotation(`Grupo` = hm_pdata$Grupo,
                                  col = list(`Grupo` = cols_species),
                                  show_annotation_name = T,
                                  show_legend=F, 
                                  border = TRUE)
# Color scale
mycol <- colorRamp2(c(2, 3.5, 6),
                    c("blue", "white", "red"))
# Heatmap matrix plotting
hm_plot <- Heatmap(hm_scl,
                   col = mycol,
                   border_gp = grid::gpar(col = "black", lty = 0.05),
                   rect_gp = grid::gpar(col = "black", lwd = 0.75),
                   clustering_distance_columns = "euclidean",
                   clustering_method_columns = "complete",
                   top_annotation = top_info_ann,
                   right_annotation = hm_row_ann,
                   show_heatmap_legend = F,
                   row_km = 3, column_km = 2)
hm_plot


#AGREGAR LEYENDAS AL MAPA DE CALOR

# Color scale legend
lgd1 <- Legend(col_fun = mycol,
               title = "Abundancia log10",
               at = seq(6),
               direction = "horizontal" )
# Group legend
lgd2 <- Legend(labels = c("4-6 años sombra Alto Pano",
                          "4-6 años luz Alto Pano",
                          "6-8 años sombra Alto Pano",
                          "6-8 años luz Alto Pano",
                          "8-10 años sombra Alto Pano",
                          "8-10 años luz Alto Pano"),
               legend_gp = gpar(fill = cols_species),
               title = "Grupo", ncol = 2)
# Metabolite class Legend
lgd3 <- Legend(labels = c(unique(hm_fdata$Superclass)) ,
               legend_gp = gpar(fill = cols_metclass), 
               title = "Superclase", ncol = 3)

#Gráfico del mapa de calor.

set.seed(810)
# Converting to ggplot
gg_heatmap <- grid.grabExpr(draw(hm_plot))
gg_heatmap <- ggpubr::as_ggplot(gg_heatmap)
# Legends
all_legends <- packLegend(lgd1, lgd2, lgd3, direction = "horizontal")
gg_legend <- grid.grabExpr(draw(all_legends))
gg_legend_fn <- ggpubr::as_ggplot(gg_legend)
# Heatmap plot
gcms_hm <- plot_grid(gg_legend_fn,
                     gg_heatmap, ncol = 1,
                     rel_heights = c(0.10, 0.88))
gcms_hm

# Save heatmap plot
ggsave(filename = "Resultados/GCMS_HeatmapB.jpeg", plot = gcms_hm,
       width = 5.5, height = 4.7, units = "in", dpi = 300, scale = 1.7)

#HISTORIAL DE FUNCIONES NOTAME USADAS
finish_log()
